plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.github.jruby-gradle.jar' version '1.6.0'
}

import com.github.jrubygradle.JRubyPrepare

ext {
    rubygemsRaccVersion = '1.5.2'
    rubygemsAstVersion = '2.4.2'
    rubygemsParserVersion = '3.0.3.1'
}

processResources.from("src/main/resources", "${buildDir}/dependency_gems/gems")

dependencies {
    compileOnly 'org.sonarsource.sonarqube:sonar-plugin-api'
    implementation 'org.sonarsource.analyzer-commons:sonar-analyzer-commons'
    implementation project(':slang-plugin')
    implementation project(':slang-checks')
    implementation project(':slang-api')
    implementation project(path: ':jruby-repackaged', configuration: 'shadow')
    gems "rubygems:racc:${rubygemsRaccVersion}"
    gems "rubygems:ast:${rubygemsAstVersion}"
    gems "rubygems:parser:${rubygemsParserVersion}"
    testImplementation project(':slang-testing')
    testImplementation project(':slang-antlr')
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-migrationsupport"
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.github.classgraph:classgraph'
}

task unpackDependencyGems(type: JRubyPrepare) {
    outputDir "${buildDir}/dependency_gems"
    dependencies configurations.gems
}
task copyGemsJarsFromDirectoryToShadowBugWorkaroundJar(type: Jar) {
    from "${buildDir}/dependency_gems/gems"
    includes = ['**/*.jar']
    destinationDirectory = file("${buildDir}/tmp")
    archiveFileName = "shadowBugWorkaround.jar"
}
copyGemsJarsFromDirectoryToShadowBugWorkaroundJar.dependsOn unpackDependencyGems
processResources.dependsOn copyGemsJarsFromDirectoryToShadowBugWorkaroundJar

jar {
    manifest {
        def displayVersion = (project.buildNumber == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.buildNumber})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'org.sonarsource.ruby.plugin.RubyPlugin',
                'Plugin-Description': 'Code Analyzer for Ruby',
                'Plugin-Developers': 'SonarSource Team',
                'Plugin-Display-Version': displayVersion,
                'Plugin-Homepage': 'http://redirect.sonarsource.com/plugins/ruby.html',
                'Plugin-IssueTrackerUrl': 'https://jira.sonarsource.com/browse/SONARSLANG',
                'Plugin-Key': 'ruby',
                'Plugin-License': 'GNU LGPL 3',
                'Plugin-Name': 'Ruby Code Quality and Security',
                'Plugin-Organization': 'SonarSource',
                'Plugin-OrganizationUrl': 'http://www.sonarsource.com',
                'Plugin-SourcesUrl': 'https://github.com/SonarSource/slang',
                'Plugin-Version': project.version,
                'Sonar-Version': '6.7',
                'SonarLint-Supported': 'true',
                'Version': "${project.version}",
        )
    }
}
shadowJar {
    // shadowJar can not embed jar files, it always extract them.
    // https://imperceptiblethoughts.com/shadow/configuration/dependencies/#embedding-jar-files-inside-your-shadow-jar
    // the workaround used here, is to put jar in jar
    from file("${buildDir}/tmp/shadowBugWorkaround.jar")
    exclude 'com/headius/racc/**' // from shadowBugWorkaround.jar

    exclude 'javax/**' // com.google.code.findbugs:jsr305

    exclude "ast-${rubygemsAstVersion}/a*"
    exclude "ast-${rubygemsAstVersion}/C*"
    exclude "ast-${rubygemsAstVersion}/G*"
    exclude "ast-${rubygemsAstVersion}/L*"
    exclude "ast-${rubygemsAstVersion}/R*"
    exclude "ast-${rubygemsAstVersion}/test/**"
    exclude "ast-${rubygemsAstVersion}/.*"
    exclude "parser-${rubygemsParserVersion}/bin/**"
    exclude "parser-${rubygemsParserVersion}/C*"
    exclude "parser-${rubygemsParserVersion}/doc/**"
    exclude "parser-${rubygemsParserVersion}/G*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/lexer.rl"
    exclude "parser-${rubygemsParserVersion}/lib/parser/mac*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby1*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby20*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby21*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby22*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby23*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby24*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby25.y"
    exclude "parser-${rubygemsParserVersion}/lib/parser/ruby26*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/rubym*"
    exclude "parser-${rubygemsParserVersion}/lib/parser/runner/**"
    exclude "parser-${rubygemsParserVersion}/L*"
    exclude "parser-${rubygemsParserVersion}/p*"
    exclude "parser-${rubygemsParserVersion}/R*"
    exclude "parser-${rubygemsParserVersion}/test/**"
    exclude "parser-${rubygemsParserVersion}/.*"
    exclude "racc-${rubygemsAstVersion}-java/bin/**"
    exclude "racc-${rubygemsAstVersion}-java/C*"
    exclude "racc-${rubygemsAstVersion}-java/D*"
    exclude "racc-${rubygemsAstVersion}-java/ext/**"
    exclude "racc-${rubygemsAstVersion}-java/fastcache/**"
    exclude "racc-${rubygemsAstVersion}-java/.*"
    exclude "racc-${rubygemsAstVersion}-java/M*"
    exclude "racc-${rubygemsAstVersion}-java/misc/**"
    exclude "racc-${rubygemsAstVersion}-java/R*"
    exclude "racc-${rubygemsAstVersion}-java/rdoc/**"
    exclude "racc-${rubygemsAstVersion}-java/sample/**"
    exclude "racc-${rubygemsAstVersion}-java/s*"
    exclude "racc-${rubygemsAstVersion}-java/tasks/**"
    exclude "racc-${rubygemsAstVersion}-java/test/**"
    exclude "racc-${rubygemsAstVersion}-java/web/**"

    doLast {
        enforceJarSizeAndCheckContent(shadowJar.archiveFile.get().asFile, 14_250_000L, 14_750_000L)
    }
}

artifacts {
    archives shadowJar
}

artifactoryPublish.skip = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: shadowJar, classifier: null
            artifact sourcesJar
            artifact javadocJar
        }
    }
}
