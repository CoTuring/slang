plugins {
    id "scala"
    id "org.scoverage" version "7.0.0"
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

ext {
    scalaVersion = '2.12.9'
    scalaBinaryVersion = '2.12'
}

scoverage {
    scoverageVersion='1.4.10'
}

tasks.check.dependsOn reportScoverage

sourceSets {
    main {
        scala {
            // scala output will be a dependency used by java code
            outputDir = file("$buildDir/classes/scala/main")
        }
        java {
            outputDir = file("$buildDir/classes/java/main")
        }
    }
}

// java code depends on scala code
tasks.compileScala.classpath = sourceSets.main.compileClasspath
tasks.compileJava.classpath += files(sourceSets.main.scala.classesDirectory)
tasks.compileScoverageJava.enabled(false)

sonarqube {
    properties {
        property 'sonar.sources', 'src/main/java,src/main/scala'
        property 'sonar.scala.coverage.reportPaths', "${buildDir}/reports/scoverage/scoverage.xml"
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // scala code is covered by scoverage
                "org/sonarsource/scala/converter/*"
            ])
        }))
    }
}

dependencies {
    compileOnly 'org.sonarsource.sonarqube:sonar-plugin-api'
    implementation 'org.sonarsource.analyzer-commons:sonar-analyzer-commons'
    implementation 'org.sonarsource.analyzer-commons:sonar-xml-parsing'
    implementation project(':slang-api')
    implementation project(':slang-checks')
    implementation project(':slang-plugin')
    implementation('org.scalameta:scalameta_2.12:4.5.7') {
        exclude group: 'org.scalameta', module: 'semanticdb_2.12'
        exclude group: 'com.lihaoyi', module: 'fansi_2.12'
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    testImplementation project(':slang-testing')
    testImplementation project(':slang-antlr')
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-migrationsupport"
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.github.classgraph:classgraph'

    constraints {
        zinc('org.apache.logging.log4j:log4j-api:2.17.2') {
            because 'Address CVE-2021-44832 vulnerability'
        }
        zinc('org.apache.logging.log4j:log4j-core:2.17.2') {
            because 'Address CVE-2021-44832 vulnerability'
        }
        zinc('com.google.protobuf:protobuf-java:3.19.3') {
            because 'Address CVE-2021-22569'
        }
    }
}

jar {
    manifest {
        def displayVersion = (project.buildNumber == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.buildNumber})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'org.sonarsource.scala.plugin.ScalaPlugin',
                'Plugin-Description': 'Code Analyzer for Scala',
                'Plugin-Developers': 'SonarSource Team',
                'Plugin-Display-Version': displayVersion,
                'Plugin-Homepage': 'http://redirect.sonarsource.com/plugins/scala.html',
                'Plugin-IssueTrackerUrl': 'https://jira.sonarsource.com/browse/SONARSLANG',
                'Plugin-Key': 'sonarscala',
                'Plugin-License': 'GNU LGPL 3',
                'Plugin-Name': 'Scala Code Quality and Security',
                'Plugin-Organization': 'SonarSource',
                'Plugin-OrganizationUrl': 'http://www.sonarsource.com',
                'Plugin-SourcesUrl': 'https://github.com/SonarSource/slang',
                'Plugin-Version': project.version,
                'Sonar-Version': '6.7',
                'SonarLint-Supported': 'true',
                'Version': "${project.version}",
        )
    }
}

shadowJar {
    minimize { }
    // org.scalameta:common_2.12
    exclude 'org/scalameta/overload/*'
    // org.scalameta:io_2.12
    exclude 'scala/meta/internal/io/*'
    // org.scala-lang:scala-library
    exclude 'scala/annotation/*'
    exclude 'scala/collection/parallel/**'
    exclude 'scala/concurrent/**'
    exclude 'scala/io/*'
    exclude 'scala/util/matching/*'
    //
    exclude 'com/google/protobuf/**'
    // scala-build related files, useless for our use
    exclude '**/*.js'
    exclude '**/*.properties'
    exclude '**/*.proto'
    exclude '**/*.txt'
    doLast {
        enforceJarSizeAndCheckContent(shadowJar.archiveFile.get().asFile, 12_500_000L, 13_500_000L)
    }
}

artifacts {
    archives shadowJar
}

artifactoryPublish.skip = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: shadowJar, classifier: null
            artifact sourcesJar
            artifact javadocJar
        }
    }
}
