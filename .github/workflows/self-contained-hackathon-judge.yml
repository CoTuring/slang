name: Hackathon Judge (Simplified)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to analyze (optional)"
        required: false
        type: number

permissions:
  issues: write
  pull-requests: write
  contents: write

env:
  NODE_VERSION: "18"
  JAVA_VERSION: "17"
  SONAR_SCANNER_VERSION: "5.0.1.3006"
  PYTHON_VERSION: "3.x"

jobs:
  hackathon-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    outputs:
      final_score: ${{ steps.calculate_score.outputs.overall_score }}
      sonar_url: ${{ steps.sonar_analysis.outputs.sonar_url }}
      report_url: ${{ steps.commit_results.outputs.report_url }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract PR Information
        id: pr_info
        shell: bash
        run: |
          cd .github/scripts
          npm install --silent @actions/core @actions/github
          node extract-pr-info.js

      - name: Setup Development Environment
        uses: ./.github/actions/setup-env
        with:
          node-version: ${{ env.NODE_VERSION }}
          java-version: ${{ env.JAVA_VERSION }}
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Detect Project Stack
        id: detect_stack
        uses: ./.github/actions/detect-stack

      - name: Install Dependencies
        uses: ./.github/actions/install-deps
        with:
          language: ${{ steps.detect_stack.outputs.language }}
          framework: ${{ steps.detect_stack.outputs.framework }}

      - name: Run Tests & Coverage
        id: test_analysis
        uses: ./.github/actions/test-coverage
        with:
          language: ${{ steps.detect_stack.outputs.language }}

      - name: SonarCloud Analysis
        id: sonar_analysis
        uses: ./.github/actions/sonar-analysis
        with:
          project_key: ${{ vars.SONAR_PROJECT_KEY }}
          organization: ${{ vars.SONAR_ORGANIZATION }}
          language: ${{ steps.detect_stack.outputs.language }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Security Analysis
        id: security_analysis
        uses: ./.github/actions/security-scan
        with:
          language: ${{ steps.detect_stack.outputs.language }}

      - name: Frontend Usability Analysis
        id: frontend_analysis
        if: steps.detect_stack.outputs.has_frontend == 'true'
        uses: ./.github/actions/frontend-audit
        with:
          framework: ${{ steps.detect_stack.outputs.framework }}

      - name: Team Behavior Analysis
        id: team_analysis
        uses: ./.github/actions/team-behavior

      - name: AI Usage Analysis
        id: ai_analysis
        uses: ./.github/actions/ai-detection

      - name: Calculate Final Score
        id: calculate_score
        uses: ./.github/actions/calculate-score
        with:
          test_score: ${{ steps.test_analysis.outputs.test_score }}
          sonar_score: ${{ steps.sonar_analysis.outputs.sonar_score }}
          security_score: ${{ steps.security_analysis.outputs.security_score }}
          frontend_score: ${{ steps.frontend_analysis.outputs.usability_score || '0' }}
          team_score: ${{ steps.team_analysis.outputs.behavior_score }}
          ai_score: ${{ steps.ai_analysis.outputs.ai_score }}

      - name: Upload Analysis Reports
        uses: actions/upload-artifact@v4
        with:
          name: hackathon-analysis-${{ steps.pr_info.outputs.team_name }}-pr${{ steps.pr_info.outputs.pr_number }}
          path: |
            reports/
            *.json
          retention-days: 30
          if-no-files-found: ignore

      - name: Commit Analysis Results to Repository
        id: commit_results
        shell: bash
        run: |
          # Configure git
          git config --global user.name "Hackathon Judge Bot"
          git config --global user.email "hackathon-judge@github-actions.com"

          # Get environment variables
          TEAM_NAME="${{ steps.pr_info.outputs.team_name }}"
          PR_NUMBER="${{ steps.pr_info.outputs.pr_number }}"
          OVERALL_SCORE="${{ steps.calculate_score.outputs.overall_score }}"

          echo "Creating reports for Team: $TEAM_NAME, PR: $PR_NUMBER, Score: $OVERALL_SCORE"

          # Ensure we're on the right branch
          DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
          if [ -z "$DEFAULT_BRANCH" ]; then
            DEFAULT_BRANCH="main"
          fi

          git fetch origin
          git checkout "$DEFAULT_BRANCH" || git checkout -b "$DEFAULT_BRANCH"
          git pull origin "$DEFAULT_BRANCH" --rebase || echo "No remote changes to pull"
          # Create timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")

          # Create reports directory structure
          REPORTS_DIR="reports/teams/${TEAM_NAME}/pr-${PR_NUMBER}"
          echo "Creating reports directory: ${REPORTS_DIR}"
          mkdir -p "${REPORTS_DIR}"
          # Move individual report files from root reports/ to team directory
          echo "Moving individual report files to team directory..."
          echo "Debug: Listing contents of reports/ directory:"
          ls -la reports/ || echo "reports/ directory not found"          # List of individual report files to move
          REPORT_FILES=(
            "ai-analysis.json"
            "coverage-summary.json"
            "security-summary.json"
            "team-analysis.json"
            "trivy-results.json"
            "score-breakdown.json"
            "sonar-analysis-results.json"
          )

          for file in "${REPORT_FILES[@]}"; do
            if [[ -f "reports/${file}" ]]; then
              echo "Moving reports/${file} to ${REPORTS_DIR}/${file}"
              mv "reports/${file}" "${REPORTS_DIR}/${file}"
            else
              echo "File reports/${file} not found, skipping..."
            fi
          done

          echo "Debug: Listing contents of team directory after move:"
          ls -la "${REPORTS_DIR}/" || echo "Team directory not found"

          # Create analysis report
          cat > "${REPORTS_DIR}/analysis-${TIMESTAMP}.json" << EOF
          {
            "metadata": {
              "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "team_name": "${TEAM_NAME}",
              "pr_number": ${PR_NUMBER},
              "repository": "${GITHUB_REPOSITORY}",
              "commit_sha": "${GITHUB_SHA}",
              "workflow_run_id": "${GITHUB_RUN_ID}"
            },
            "scores": {
              "overall_score": ${OVERALL_SCORE}
            }
          }
          EOF

          # Create summary report
          cat > "${REPORTS_DIR}/latest-summary.md" << EOF
          # Analysis Report for Team: ${TEAM_NAME}

          **PR #${PR_NUMBER} Analysis Results**

          - **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Overall Score:** ${OVERALL_SCORE}/100
          - **Repository:** ${GITHUB_REPOSITORY}
          - **Commit:** ${GITHUB_SHA}
          *Generated by Hackathon Judge Bot*
          EOF
          echo "Debug: Git status before commit check:"
          git status
          echo "Debug: Checking for untracked files:"
          git status --porcelain
          echo "Debug: Files to be committed:"
          git diff --name-only --cached

          # Check if there are changes to commit
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Changes detected, committing reports..."
            git add reports/
            echo "Debug: Git status after git add:"
            git status
            git commit -m "🤖 Add analysis results for ${TEAM_NAME} PR #${PR_NUMBER} (Score: ${OVERALL_SCORE}/100)"
            
            CURRENT_BRANCH=$(git branch --show-current)
            git push origin $CURRENT_BRANCH
            echo "Reports committed and pushed successfully!"
            echo "reports_committed=true" >> $GITHUB_OUTPUT
              # Generate report URL for persistent access (only if reports were committed)
            REPORT_URL="https://github.com/${GITHUB_REPOSITORY}/tree/${DEFAULT_BRANCH}/reports/teams/${TEAM_NAME}/pr-${PR_NUMBER}"
            echo "Report URL: ${REPORT_URL}"
            echo "report_url=${REPORT_URL}" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit"
            echo "reports_committed=false" >> $GITHUB_OUTPUT
            echo "report_url=" >> $GITHUB_OUTPUT
          fi

      - name: Generate HTML Report
        id: generate_html_report
        if: steps.commit_results.outputs.reports_committed == 'true'
        uses: ./.github/actions/generate-html-report
        with:
          team_name: ${{ steps.pr_info.outputs.team_name }}
          pr_number: ${{ steps.pr_info.outputs.pr_number }}
          reports_dir: "reports/teams"

      - name: Commit HTML Report to Repository
        id: commit_html_report
        if: steps.generate_html_report.outputs.html_file
        run: |
          echo "🔄 Committing HTML report to repository..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if HTML files were created and need to be committed
          if [[ -n "$(git status --porcelain reports/)" ]]; then
            echo "HTML report changes detected, committing..."
            git add reports/
            git commit -m "📊 Add HTML report for ${{ steps.pr_info.outputs.team_name }} PR #${{ steps.pr_info.outputs.pr_number }}"
              CURRENT_BRANCH=$(git branch --show-current)
            git push origin $CURRENT_BRANCH
            echo "HTML report committed and pushed successfully!"
            echo "html_committed=true" >> $GITHUB_OUTPUT
          else
            echo "No HTML report changes to commit"
            echo "html_committed=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate and Commit Reports Index
        id: generate_index
        if: steps.commit_results.outputs.reports_committed == 'true'
        run: |
          echo "🔄 Generating reports index page..."

          # Configure git for commits
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Generate the index page
          node .github/scripts/generate-index.js

          # Check if index was generated and commit it
          if [[ -f "reports/index.html" ]]; then
            echo "✅ Index page generated successfully"
            
            # Always add and commit the index page (it might have updated team data)
            echo "📤 Committing updated index page..."
            git add reports/index.html
            
            # Check if there are actual changes to commit
            if git diff --cached --quiet; then
              echo "📋 No changes to index page, already up to date"
            else
              git commit -m "📊 Update reports dashboard index page"
              
              CURRENT_BRANCH=$(git branch --show-current)
              git push origin $CURRENT_BRANCH
              echo "✅ Reports index committed and pushed successfully!"
            fi
              # Set repository URL for users to access (always set this)
            REPORTS_URL="https://github.com/${GITHUB_REPOSITORY}/blob/${CURRENT_BRANCH}/reports/index.html"
            echo "📋 Reports dashboard available at: ${REPORTS_URL}"
            echo "reports_index_url=${REPORTS_URL}" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to generate index page"
          fi

      - name: Post Results Comment
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/post-comment
        with:
          overall_score: ${{ steps.calculate_score.outputs.overall_score }}
          test_score: ${{ steps.test_analysis.outputs.test_score }}
          sonar_score: ${{ steps.sonar_analysis.outputs.sonar_score }}
          sonar_url: ${{ steps.sonar_analysis.outputs.sonar_url }}
          security_score: ${{ steps.security_analysis.outputs.security_score }}
          frontend_score: ${{ steps.frontend_analysis.outputs.usability_score || '0' }}
          team_score: ${{ steps.team_analysis.outputs.behavior_score }}
          ai_score: ${{ steps.ai_analysis.outputs.ai_score }}
          detected_stack: ${{ steps.detect_stack.outputs.language }}
          pr_number: ${{ steps.pr_info.outputs.pr_number }}
          team_name: ${{ steps.pr_info.outputs.team_name }}
          high_severity: ${{ steps.security_analysis.outputs.high_severity || '0' }}
          medium_severity: ${{ steps.security_analysis.outputs.medium_severity || '0' }}
          low_severity: ${{ steps.security_analysis.outputs.low_severity || '0' }}
          coverage_percentage: ${{ steps.test_analysis.outputs.coverage_percentage || '0' }}
          test_files: ${{ steps.test_analysis.outputs.test_files || '0' }}
          sonar_status: ${{ steps.sonar_analysis.outputs.quality_gate_status || 'UNKNOWN' }}
          reports_committed: ${{ steps.commit_results.outputs.reports_committed }}
          report_url: ${{ steps.commit_results.outputs.report_url }}
          html_report_file: ${{ steps.generate_html_report.outputs.html_file || '' }}
          reports_index_url: ${{ steps.generate_index.outputs.reports_index_url || '' }}
          code_smells: ${{ steps.sonar_analysis.outputs.code_smells || '0' }}
          bugs: ${{ steps.sonar_analysis.outputs.bugs || '0' }}
          vulnerabilities: ${{ steps.sonar_analysis.outputs.vulnerabilities || '0' }}
          sonar_analysis_results: ${{ steps.sonar_analysis.outputs.analysis_results || '{}' }}
