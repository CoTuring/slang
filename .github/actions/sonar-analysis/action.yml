name: SonarCloud Analysis
description: Run SonarCloud code quality analysis and fetch detailed issues

inputs:
  project_key:
    description: "SonarCloud project key"
    required: true
  organization:
    description: "SonarCloud organization"
    required: true
  language:
    description: "Project programming language"
    required: true
    default: "javascript"
  sonar_token:
    description: "SonarCloud token"
    required: true
  github_token:
    description: "GitHub token for API access"
    required: true

outputs:
  analysis_results:
    description: "SonarCloud analysis results with detailed issues"
    value: ${{ steps.sonar-analysis.outputs.analysis_results }}
  sonar_score:
    description: "SonarCloud quality score out of 100"
    value: ${{ steps.sonar-analysis.outputs.sonar_score }}
  sonar_url:
    description: "URL to SonarCloud project dashboard"
    value: ${{ steps.sonar-analysis.outputs.sonar_url }}
  sonar_status:
    description: "SonarCloud quality gate status"
    value: ${{ steps.sonar-analysis.outputs.sonar_status }}
  code_smells:
    description: "Number of code smells found"
    value: ${{ steps.sonar-analysis.outputs.code_smells }}
  bugs:
    description: "Number of bugs found"
    value: ${{ steps.sonar-analysis.outputs.bugs }}
  vulnerabilities:
    description: "Number of vulnerabilities found"
    value: ${{ steps.sonar-analysis.outputs.vulnerabilities }}

runs:
  using: "composite"
  steps:
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ github.token }}
        SONAR_TOKEN: ${{ inputs.sonar_token }}

    - name: Wait for analysis completion
      shell: bash
      run: |
        echo "Waiting for SonarCloud analysis to complete..."
        sleep 30

    - name: Fetch detailed SonarCloud issues
      id: sonar-analysis
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar_token }}
        SONAR_PROJECT_KEY: ${{ inputs.project_key }}
        SONAR_ORGANIZATION: ${{ inputs.organization }}
        GITHUB_WORKSPACE_PATH: ${{ github.workspace }}
      run: |
        echo "Fetching SonarCloud analysis results using Node.js script..."

        # Save current directory (repository root)
        REPO_ROOT=$PWD
        echo "Repository root: $REPO_ROOT"

        # Run the Node.js script to fetch detailed SonarCloud data from action directory
        cd ${{ github.action_path }}
        echo "Running SonarCloud fetch script from: $PWD"
        GITHUB_WORKSPACE=$REPO_ROOT node fetch-sonar-details.js > sonar_output.txt 2>&1

        # Return to repository root to check for generated files
        cd $REPO_ROOT

        # Check if sonar file was created in reports directory
        echo "Checking for SonarCloud report file..."
        if [[ -f "reports/sonar-analysis-results.json" ]]; then
          echo "✅ SonarCloud report file found at reports/sonar-analysis-results.json"
          ls -la reports/sonar-analysis-results.json
        else
          echo "❌ SonarCloud report file not found at reports/sonar-analysis-results.json"
          echo "Available files in reports/:"
          ls -la reports/ || echo "Reports directory does not exist"
        fi

        # Go back to action directory to process the output
        cd ${{ github.action_path }}

        # Extract the JSON from the output between the heredoc markers
        analysis_results=$(grep -A 1000 "SONAR_ANALYSIS_RESULTS<<EOF" sonar_output.txt | grep -B 1000 "^EOF$" | sed '1d;$d' | tr -d '\n')

        # Validate JSON and extract individual metrics
        if echo "$analysis_results" | jq . > /dev/null 2>&1; then
          echo "✅ Valid JSON output received"
          
          # Extract individual values from JSON
          bugs_count=$(echo "$analysis_results" | jq -r '.summary.bugs // "0"')
          vulnerabilities_count=$(echo "$analysis_results" | jq -r '.summary.vulnerabilities // "0"')
          code_smells_count=$(echo "$analysis_results" | jq -r '.summary.code_smells // "0"')
          coverage=$(echo "$analysis_results" | jq -r '.summary.coverage // "0"')
          quality_gate=$(echo "$analysis_results" | jq -r '.summary.quality_gate_status // "UNKNOWN"')
          
          # Calculate a quality score based on SonarCloud metrics
          # Base score of 100, subtract points for issues
          sonar_score=100
          sonar_score=$((sonar_score - bugs_count * 5))        # -5 points per bug
          sonar_score=$((sonar_score - vulnerabilities_count * 10))  # -10 points per vulnerability  
          sonar_score=$((sonar_score - code_smells_count / 2)) # -0.5 points per code smell
          
          # Ensure score doesn't go below 0
          if [ $sonar_score -lt 0 ]; then
            sonar_score=0
          fi
          
          # Generate SonarCloud URL
          sonar_url="https://sonarcloud.io/project/overview?id=${{ inputs.project_key }}"
          
          echo "SonarCloud analysis completed successfully!"
          echo "Bugs: $bugs_count"
          echo "Vulnerabilities: $vulnerabilities_count"
          echo "Code Smells: $code_smells_count"
          echo "Coverage: $coverage%"
          echo "Quality Gate: $quality_gate"
          echo "Calculated Score: $sonar_score/100"
          
          # Set all outputs
          echo "analysis_results=$analysis_results" >> $GITHUB_OUTPUT
          echo "sonar_score=$sonar_score" >> $GITHUB_OUTPUT
          echo "sonar_url=$sonar_url" >> $GITHUB_OUTPUT
          echo "sonar_status=$quality_gate" >> $GITHUB_OUTPUT
          echo "code_smells=$code_smells_count" >> $GITHUB_OUTPUT
          echo "bugs=$bugs_count" >> $GITHUB_OUTPUT
          echo "vulnerabilities=$vulnerabilities_count" >> $GITHUB_OUTPUT
        else
          echo "❌ Invalid JSON output, using fallback"
          analysis_results='{"summary":{"bugs":"0","vulnerabilities":"0","code_smells":"0","coverage":"0","quality_gate_status":"ERROR"},"detailed_issues":{"bugs":"Error fetching data","vulnerabilities":"Error fetching data","code_smells":"Error fetching data"},"total_issues":0,"error":"JSON parsing failed"}'
          
          # Set fallback outputs
          echo "analysis_results=$analysis_results" >> $GITHUB_OUTPUT
          echo "sonar_score=0" >> $GITHUB_OUTPUT
          echo "sonar_url=https://sonarcloud.io/project/overview?id=${{ inputs.project_key }}" >> $GITHUB_OUTPUT
          echo "sonar_status=ERROR" >> $GITHUB_OUTPUT
          echo "code_smells=0" >> $GITHUB_OUTPUT
          echo "bugs=0" >> $GITHUB_OUTPUT
          echo "vulnerabilities=0" >> $GITHUB_OUTPUT
        fi

        # Show the script output for debugging
        echo "Script output:"
        cat sonar_output.txt
